%% Environment Class
classdef Environment < handle
   properties
       foundation = EnvironmentObject.empty;    % Foundation object (table) on which everything will sit
       targets;                                 % Matrix of the target objects to be collected and deposited
       deposit;                                 % Matrix of the deposit objects to which the targets must be moved
       miscObjects;                             % Matrix of miscelllaneous objects in the environment
       targetIndex = 1;                         % Index used to track the number of target objects
       depositIndex = 1;                        % Index used to track the number of deposit objects
       miscObjectIndex = 1;                     % Index used to track the number of misc objects
       lightCurtain = LightCurtain.empty;       % Light Curtain object surrounding the table
       robot;                                   % Dobot object in environment
       checkObjects;                            % Matrix of objects that need to be checked do not obstruct the light curtain
       checkObjectIndex = 1;                    % Index used to track the number of check objects
       obstacleObjects;                         % Matrix of objects that need to be checked do not collide with the Dobot
       obstacleObjectIndex = 1;                 % Index used to track the number of obstacles
       safetyObject;                            % Matrix of the safety objects installed in the environment
       safetyObjectIndex = 1;                   % Index used to track the number of safety objects
   end
   
   methods 
       % Constructor which accepts a variable number of arguments and used
       % to store the objects in the environment
       function self = Environment(varargin)
           % Iterate through each argument and add the object to the
           % environment
           for i = 1:1:nargin
               object = varargin{i};
               self.AddObject(object);
           end
           
           % Check if a light curtain does not exist, if not, create a
           % light curtain around the table
           if isequal(self.lightCurtain, LightCurtain.empty)
               self.lightCurtain = LightCurtain(self.foundation(1));             
           end
           
       end
       %% Add generic object
       % Function used to add objects into the environment
       function AddObject(self, object)
           % If a table has been passed, store it in the foundation object
           % and generate a light curtain
           if strcmp(object.type, 'foundation') 
               self.foundation = object;
               self.lightCurtain = LightCurtain(self.foundation);
           end
           
           % If a target object has been passed, store the object in the
           % targets matric
           if strcmp(object.type, 'target')
               self.targets{1, self.targetIndex} = object;
               self.targetIndex = self.targetIndex + 1;
           end
           
           if strcmp(object.type, 'deposit')
               self.deposit{1, self.depositIndex} = object;
               self.depositIndex = self.depositIndex + 1;
           end
           
           if strcmp(object.type, 'misc') 
               self.miscObjects{self.miscObjectIndex} = object;
               self.miscObjectIndex = self.miscObjectIndex + 1;
               self.checkObjects{self.checkObjectIndex} = object;
               self.checkObjectIndex = self.checkObjectIndex + 1;
           end
           
           if strcmp(object.type, 'obstacle') 
               self.obstacleObjects{self.obstacleObjectIndex} = object;
               self.obstacleObjectIndex = self.obstacleObjectIndex + 1;
           end
           
           if strcmp(object.type, 'safety')
              self.safetyObject{self.safetyObjectIndex} = object;
              self.safetyObjectIndex = self.safetyObjectIndex + 1;
           end
           
       end
       %% Draw Background
       function DrawBackground(self)
          backgroundImg1 = imread('background1.jpg');
          backgroundImg2 = imread('background2.jpg');
          groundImg = imread('ground.jpg');
          
          % Background 2
          xImage = [-1.5 1.5; -1.5 1.5];
          yImage = [-1 -1; -1 -1];
          zImage = [1.5 1.5; 0 0];
          surf(xImage, yImage, zImage, 'CData', backgroundImg2, 'FaceColor', 'texturemap');
          
          % Background 1
          xImage = [-1.5 -1.5; -1.5 -1.5];
          yImage = [-1 1; -1 1];
          zImage = [1.5 1.5; 0 0];
          surf(xImage, yImage, zImage, 'CData', backgroundImg1, 'FaceColor', 'texturemap');
          
          % Ground
          xImage = [-1.5 -1.5; 1.5 1.5];
          yImage = [-1 1; -1 1];
          zImage = [0 0; 0 0];
          surf(xImage, yImage, zImage, 'CData', groundImg, 'FaceColor', 'texturemap');
       end
       %% Add Robot
       function AddRobot(self, robot)
           self.robot = robot;
       end
       %% Display Environment - only run once!
       function Display(self)         
           for i = 1:size(self.foundation,2)
               self.foundation(i).Display();
           end
           
           hold on;
           
           for i = 1:size(self.targets,2)
               self.targets{i}.Display();
           end
           
           for i = 1:size(self.deposit,2)
               self.deposit{i}.Display();
           end
           
           for i = 1:size(self.safetyObject, 2)
              self.safetyObject{i}.Display(); 
           end
           
           self.robot.Display();

           self.lightCurtain.Display();
                      
           self.DrawBackground();
           axis equal;
           camlight;
       end
   end
end